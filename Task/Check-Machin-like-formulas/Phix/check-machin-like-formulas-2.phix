include builtins\pfrac.e -- (provisional/0.8.0+)

function tans(sequence x)
    frac a,b
    integer h
    if length(x)=1 then
        {integer m, frac f} = x[1]
        if m=1 then
            return f
        elsif m<0 then
            return frac_uminus(tans({{-m,f}}))
        end if
        h = floor(m/2)
        a = tans({{h,f}})
        b = tans({{m-h,f}})
    else
        h = floor(length(x)/2)
        a = tans(x[1..h])
        b = tans(x[h+1..$])
    end if
    return frac_div(frac_add(a,b) , frac_sub(frac_new(1),frac_mul(a,b)))
end function

function parse(string formula)
-- obviously the error handling here is a bit brutal...
sequence res = {}, r
integer m,n,d
    formula = substitute(formula," ","") -- strip spaces
    if formula[1..5]!="pi/4=" then ?9/0 end if
    formula = formula[6..$]
    res = {}
    while length(formula) do
        integer sgn = +1
        switch formula[1] do
            case '-': sgn = -1; fallthrough
            case '+': formula = formula[2..$]
        end switch
        if formula[1]='a' then
            m = sgn
        else
            r = scanf(formula,"%d*%s")
            if length(r)!=1 then ?9/0 end if
            {m,formula} = r[1]
            m *= sgn
        end if
        r = scanf(formula,"arctan(%d/%d)%s")
        if length(r)!=1 then ?9/0 end if
        {n,d,formula} = r[1]
        res = append(res,{m,frac_new(n,d)})
    end while
    return res
end function

procedure test(string formula)
    frac f = tans(parse(formula))
    if frac_eq(f,frac_one) then
        printf(1,"OK: %s\n",{formula})
    else
        printf(1,"ERROR: %s\n",{formula})
        printf(1,"  %s\n\\ %s\n",frac_sprint(f,asPair:=true))
    end if
end procedure

constant formulae = {"pi/4 = arctan(1/2) + arctan(1/3)",
                     "pi/4 = 2*arctan(1/3) + arctan(1/7)",
                     "pi/4 = 4*arctan(1/5) - arctan(1/239)",
                     "pi/4 = 5*arctan(1/7) + 2*arctan(3/79)",
                     "pi/4 = 5*arctan(29/278) + 7*arctan(3/79)",
                     "pi/4 = arctan(1/2) + arctan(1/5) + arctan(1/8)",
                     "pi/4 = 4*arctan(1/5) - arctan(1/70) + arctan(1/99)",
                     "pi/4 = 5*arctan(1/7) + 4*arctan(1/53) + 2*arctan(1/4443)",
                     "pi/4 = 6*arctan(1/8) + 2*arctan(1/57) + arctan(1/239)",
                     "pi/4 = 8*arctan(1/10) - arctan(1/239) - 4*arctan(1/515)",
                     "pi/4 = 12*arctan(1/18) + 8*arctan(1/57) - 5*arctan(1/239)",
                     "pi/4 = 16*arctan(1/21) + 3*arctan(1/239) + 4*arctan(3/1042)",
                     "pi/4 = 22*arctan(1/28) + 2*arctan(1/443) - 5*arctan(1/1393) - 10*arctan(1/11018)",
                     "pi/4 = 22*arctan(1/38) + 17*arctan(7/601) + 10*arctan(7/8149)",
                     "pi/4 = 44*arctan(1/57) + 7*arctan(1/239) - 12*arctan(1/682) + 24*arctan(1/12943)",
                     "pi/4 = 88*arctan(1/172) + 51*arctan(1/239) + 32*arctan(1/682) + 44*arctan(1/5357) + 68*arctan(1/12943)",
                     "pi/4 = 88*arctan(1/172) + 51*arctan(1/239) + 32*arctan(1/682) + 44*arctan(1/5357) + 68*arctan(1/12944)"}

for i=1 to length(formulae) do
    test(formulae[i])
end for

function coin_count(sequence coins, integer amount)
    -- start with 1 known way to achieve 0 (being no coins)
    --  (nb: s[1] holds the solution for 0, s[n+1] for n)
    sequence s = repeat(0,amount+1)
    s[1] = 1
    -- then for every coin that we can use, increase number of
    --  solutions by that previously found for the remainder.
    for c=1 to length(coins) do
        -- this inner loop is essentially behaving as if we had
        -- called this routine with 1..amount, but skipping any
        -- less than the coin's value, hence coins[c]..amount.
        for n=coins[c] to amount do
            s[n+1] += s[n-coins[c]+1]
        end for
    end for
    return s[amount+1]
end function

-- The key to understanding the above is to try a dry run of this:
printf(1,"%d\n",coin_count({2,3},5))    -- (prints 1)
-- You'll need 4 2p coins, 3 3p coins, and 5 spaces marked 1..5.
-- Place 2p wherever it fits: 1:0 2:1 3:1 4:1 5:1
-- Add previously found solns: +0  +1  +0  +1  +0   [1]
-- Place 3p wherever it fits: 1:0 2:0 3:1 4:1 5:1
-- Add previously found solns: +0  +0  +1  +0  +1   [2]
-- [1] obviously at 2: we added the base soln for amount=0,
--     and at 4: we added the previously found soln for 2.
--     also note that we added nothing for 2p+3p, yet, that
--     fact is central to understanding why this works. [3]
-- [2] obviously at 3: we added the base soln for amount=0,
--     at 4: we added the zero solutions yet found for 1p,
--     and at 5: we added the previously found soln for 2.
--     you can imagine at 6,9,12 etc all add in soln for 3,
--     albeit by adding that as just added to the precessor.
-- [3] since we add no 3p solns when processing 2p, we do
--     not count 2p+3p and 3p+2p as two solutions.

--For N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}.
printf(1,"%d\n",coin_count({1,2,3},4))
--For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}.
printf(1,"%d\n\n",coin_count({2,3,5,6},10))

printf(1,"%d\n",coin_count({25, 10, 5, 1},1_00))
printf(1,"%,d\n",coin_count({100, 50, 25, 10, 5, 1},1000_00))

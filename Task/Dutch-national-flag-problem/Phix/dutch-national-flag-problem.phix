function three_way_partition(sequence s, integer mid)
integer i=1, j=1, n = length(s)

    while j < n do
        if s[j] < mid then
            {s[i],s[j]} = {s[j],s[i]}
            i += 1
            j += 1
        elsif s[j] > mid then
            {s[j],s[n]} = {s[n],s[j]}
            n -= 1
        else
            j += 1
        end if
    end while
    return s
end function

constant colours = {"red","white","blue"}
enum /*red,*/ white = 2, blue, maxc = blue

procedure show(string msg, sequence s)
    for i=1 to length(s) do
        s[i] = colours[s[i]]
    end for
    printf(1,"%s: %s\n",{msg,join(s)})
end procedure

sequence unsorted, sorted
    while 1 do
        unsorted = sq_rand(repeat(maxc,12))
--      sorted = sort(unsorted) -- (works just as well)
        sorted = three_way_partition(unsorted, white)
        if unsorted!=sorted then exit end if
        ?"oops"
    end while
    show("Unsorted",unsorted)
    show("Sorted",sorted)

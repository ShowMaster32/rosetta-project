function largestLeftTruncatablePrime(integer base)
integer radix = 0
sequence candidates = {ba_new(0)}
    while true do
        bigatom multiplier = ba_power(base,radix)
        sequence newCandidates = {}
        for i=1 to base-1 do
            bigatom mi = ba_multiply(i,multiplier)
            for j=1 to length(candidates) do
                bigatom cj = candidates[j],
                        cm = ba_add(cj,mi)
                if is_prime_mr(cm) then
                    newCandidates = append(newCandidates,cm)
                end if
            end for
        end for
        if newCandidates={} then exit end if
        candidates = newCandidates
        radix += 1
printf(1,"length %d candidates: %d \r",{radix,length(candidates)})
    end while
printf(1,"                         \r")
    return ba_sprint(candidates[$])
end function

for i=3 to 17 do
    atom t0 = time()
    string r = largestLeftTruncatablePrime(i),
           t = elapsed(time()-t0)
    printf(1,"base %d: %s (%s)\n",{i,r,t})
end for

enum ID,ARGS
function cf(sequence f, atom x) return call_func(f[ID],f[ARGS]&x) end function
function Union(sequence a, b, atom x) return cf(a,x)  or     cf(b,x) end function  constant r_Union = routine_id("Union")
function Inter(sequence a, b, atom x) return cf(a,x) and     cf(b,x) end function  constant r_Inter = routine_id("Inter")
function Diffr(sequence a, b, atom x) return cf(a,x) and not cf(b,x) end function  constant r_Diffr = routine_id("Diffr")
function OpOp(atom a, b, x)           return a <  x and x <  b       end function  constant r_OpOp  = routine_id("OpOp")
function ClCl(atom a, b, x)           return a <= x and x <= b       end function  constant r_ClCl  = routine_id("ClCl")
function OpCl(atom a, b, x)           return a <  x and x <= b       end function  constant r_OpCl  = routine_id("OpCl")
function ClOp(atom a, b, x)           return a <= x and x <  b       end function  constant r_ClOp  = routine_id("ClOp")

--                              expected
--              ---- desc ----,  0 1 2,  --------------- set method ---------------
constant s = {{"(0,1] u [0,2)", {1,1,0}, {r_Union,{{r_OpCl,{0,1}},{r_ClOp,{0,2}}}}},
              {"[0,2) n (1,2]", {0,0,0}, {r_Inter,{{r_ClOp,{0,2}},{r_OpCl,{1,2}}}}},
              {"[0,3) - (0,1)", {1,1,1}, {r_Diffr,{{r_ClOp,{0,3}},{r_OpOp,{0,1}}}}},
              {"[0,3) - [0,1]", {0,0,1}, {r_Diffr,{{r_ClOp,{0,3}},{r_ClCl,{0,1}}}}}},
         tf = {"True","False"}

for i=1 to length(s) do
    sequence {desc, expect, method} = s[i]
    for x=0 to 2 do
        bool r = cf(method,x)
        string error = iff(r!=expect[x+1]?"error":"")
        printf(1,"%d in %s : %s %s\n", {x, desc, tf[2-r],error})
    end for
    printf(1,"\n")
end for

function f(atom aa1, t)
    return power(t, aa1) * exp(-t)
end function

function simpson38(atom aa1, a, b, integer n)
    atom h := (b - a) / n,
         h1 := h / 3,
         tot := f(aa1,a) + f(aa1,b)
    for j=3*n-1 to 1 by -1 do
        tot += (3-(mod(j,3)=0)) * f(aa1,a+h1*j)
    end for
    return h * tot / 8
end function

function gammaIncQ(atom a, x)
    atom aa1 := a - 1,
         y := aa1,
         h := 1.5e-2
    while f(aa1,y)*(x-y) > 2e-8 and y < x do
        y += 0.4
    end while
    if y > x then y = x end if
    return 1 - simpson38(aa1, 0, y, floor(y/h/gamma(a)))
end function

function chi2ud(sequence ds)
    atom expected = sum(ds)/length(ds),
         tot = sum(sq_power(sq_sub(ds,expected),2))
    return tot / expected
end function

function chi2p(integer dof, atom distance)
    return gammaIncQ(0.5*dof, 0.5*distance)
end function

constant sigLevel = 0.05
constant tf = {"true","false"}

procedure utest(sequence dset)
    printf(1,"Uniform distribution test\n")
    integer tot = sum(dset)
    printf(1," dataset:%s\n",{sprint(dset)})
    printf(1," samples:                      %d\n", tot)
    printf(1," categories:                   %d\n", length(dset))

    integer dof := length(dset) - 1
    printf(1," degrees of freedom:           %d\n", dof)

    atom dist := chi2ud(dset)
    printf(1," chi square test statistic:    %g\n", dist)

    atom p := chi2p(dof, dist)
    printf(1," p-value of test statistic:    %g\n", p)

    bool sig := p < sigLevel
    printf(1," significant at %2.0f%% level?     %s\n", {sigLevel*100, tf[2-sig]})
    printf(1," uniform?                      %s\n",{tf[sig+1]})
end procedure

utest({199809, 200665, 199607, 200270, 199649})
utest({522573, 244456, 139979, 71531, 21461})
